# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _level
else:
    import _level

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _level.delete_SwigPyIterator

    def value(self):
        return _level.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _level.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _level.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _level.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _level.SwigPyIterator_equal(self, x)

    def copy(self):
        return _level.SwigPyIterator_copy(self)

    def next(self):
        return _level.SwigPyIterator_next(self)

    def __next__(self):
        return _level.SwigPyIterator___next__(self)

    def previous(self):
        return _level.SwigPyIterator_previous(self)

    def advance(self, n):
        return _level.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _level.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _level.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _level.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _level.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _level.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _level.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _level:
_level.SwigPyIterator_swigregister(SwigPyIterator)

class LegalPlantVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _level.LegalPlantVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _level.LegalPlantVector___nonzero__(self)

    def __bool__(self):
        return _level.LegalPlantVector___bool__(self)

    def __len__(self):
        return _level.LegalPlantVector___len__(self)

    def __getslice__(self, i, j):
        return _level.LegalPlantVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _level.LegalPlantVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _level.LegalPlantVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _level.LegalPlantVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _level.LegalPlantVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _level.LegalPlantVector___setitem__(self, *args)

    def pop(self):
        return _level.LegalPlantVector_pop(self)

    def append(self, x):
        return _level.LegalPlantVector_append(self, x)

    def empty(self):
        return _level.LegalPlantVector_empty(self)

    def size(self):
        return _level.LegalPlantVector_size(self)

    def swap(self, v):
        return _level.LegalPlantVector_swap(self, v)

    def begin(self):
        return _level.LegalPlantVector_begin(self)

    def end(self):
        return _level.LegalPlantVector_end(self)

    def rbegin(self):
        return _level.LegalPlantVector_rbegin(self)

    def rend(self):
        return _level.LegalPlantVector_rend(self)

    def clear(self):
        return _level.LegalPlantVector_clear(self)

    def get_allocator(self):
        return _level.LegalPlantVector_get_allocator(self)

    def pop_back(self):
        return _level.LegalPlantVector_pop_back(self)

    def erase(self, *args):
        return _level.LegalPlantVector_erase(self, *args)

    def __init__(self, *args):
        _level.LegalPlantVector_swiginit(self, _level.new_LegalPlantVector(*args))

    def push_back(self, x):
        return _level.LegalPlantVector_push_back(self, x)

    def front(self):
        return _level.LegalPlantVector_front(self)

    def back(self):
        return _level.LegalPlantVector_back(self)

    def assign(self, n, x):
        return _level.LegalPlantVector_assign(self, n, x)

    def resize(self, *args):
        return _level.LegalPlantVector_resize(self, *args)

    def insert(self, *args):
        return _level.LegalPlantVector_insert(self, *args)

    def reserve(self, n):
        return _level.LegalPlantVector_reserve(self, n)

    def capacity(self):
        return _level.LegalPlantVector_capacity(self)
    __swig_destroy__ = _level.delete_LegalPlantVector

# Register LegalPlantVector in _level:
_level.LegalPlantVector_swigregister(LegalPlantVector)

class ZombieQueue(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _level.ZombieQueue_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _level.ZombieQueue___nonzero__(self)

    def __bool__(self):
        return _level.ZombieQueue___bool__(self)

    def __len__(self):
        return _level.ZombieQueue___len__(self)

    def __getslice__(self, i, j):
        return _level.ZombieQueue___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _level.ZombieQueue___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _level.ZombieQueue___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _level.ZombieQueue___delitem__(self, *args)

    def __getitem__(self, *args):
        return _level.ZombieQueue___getitem__(self, *args)

    def __setitem__(self, *args):
        return _level.ZombieQueue___setitem__(self, *args)

    def pop(self):
        return _level.ZombieQueue_pop(self)

    def append(self, x):
        return _level.ZombieQueue_append(self, x)

    def empty(self):
        return _level.ZombieQueue_empty(self)

    def size(self):
        return _level.ZombieQueue_size(self)

    def swap(self, v):
        return _level.ZombieQueue_swap(self, v)

    def begin(self):
        return _level.ZombieQueue_begin(self)

    def end(self):
        return _level.ZombieQueue_end(self)

    def rbegin(self):
        return _level.ZombieQueue_rbegin(self)

    def rend(self):
        return _level.ZombieQueue_rend(self)

    def clear(self):
        return _level.ZombieQueue_clear(self)

    def get_allocator(self):
        return _level.ZombieQueue_get_allocator(self)

    def pop_back(self):
        return _level.ZombieQueue_pop_back(self)

    def erase(self, *args):
        return _level.ZombieQueue_erase(self, *args)

    def __init__(self, *args):
        _level.ZombieQueue_swiginit(self, _level.new_ZombieQueue(*args))

    def push_back(self, x):
        return _level.ZombieQueue_push_back(self, x)

    def front(self):
        return _level.ZombieQueue_front(self)

    def back(self):
        return _level.ZombieQueue_back(self)

    def assign(self, n, x):
        return _level.ZombieQueue_assign(self, n, x)

    def resize(self, *args):
        return _level.ZombieQueue_resize(self, *args)

    def insert(self, *args):
        return _level.ZombieQueue_insert(self, *args)

    def pop_front(self):
        return _level.ZombieQueue_pop_front(self)

    def push_front(self, x):
        return _level.ZombieQueue_push_front(self, x)
    __swig_destroy__ = _level.delete_ZombieQueue

# Register ZombieQueue in _level:
_level.ZombieQueue_swigregister(ZombieQueue)

FAST = _level.FAST
SLOW = _level.SLOW
VERY_SLOW = _level.VERY_SLOW

def get_random_number(min, max):
    return _level.get_random_number(min, max)
class PlantData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    hp = property(_level.PlantData_hp_get, _level.PlantData_hp_set)
    damage = property(_level.PlantData_damage_get, _level.PlantData_damage_set)
    action_interval_seconds = property(_level.PlantData_action_interval_seconds_get, _level.PlantData_action_interval_seconds_set)
    action_interval = property(_level.PlantData_action_interval_get, _level.PlantData_action_interval_set)
    recharge_seconds = property(_level.PlantData_recharge_seconds_get, _level.PlantData_recharge_seconds_set)
    recharge = property(_level.PlantData_recharge_get, _level.PlantData_recharge_set)
    cost = property(_level.PlantData_cost_get, _level.PlantData_cost_set)
    action_func = property(_level.PlantData_action_func_get, _level.PlantData_action_func_set)
    plant_name = property(_level.PlantData_plant_name_get, _level.PlantData_plant_name_set)
    next_available_frame = property(_level.PlantData_next_available_frame_get, _level.PlantData_next_available_frame_set)

    def __init__(self, fps, hp, damage, action_interval_seconds, recharge_seconds, cost, action_func, plant_name):
        _level.PlantData_swiginit(self, _level.new_PlantData(fps, hp, damage, action_interval_seconds, recharge_seconds, cost, action_func, plant_name))
    __swig_destroy__ = _level.delete_PlantData

# Register PlantData in _level:
_level.PlantData_swigregister(PlantData)

NO_PLANT = _level.NO_PLANT
CHERRYBOMB = _level.CHERRYBOMB
CHOMPER = _level.CHOMPER
HYPNOSHROOM = _level.HYPNOSHROOM
ICESHROOM = _level.ICESHROOM
JALAPENO = _level.JALAPENO
PEASHOOTER = _level.PEASHOOTER
POTATOMINE = _level.POTATOMINE
PUFFSHROOM = _level.PUFFSHROOM
REPEATERPEA = _level.REPEATERPEA
SCAREDYSHROOM = _level.SCAREDYSHROOM
SNOWPEA = _level.SNOWPEA
SPIKEWEED = _level.SPIKEWEED
SQUASH = _level.SQUASH
SUNFLOWER = _level.SUNFLOWER
SUNSHROOM = _level.SUNSHROOM
THREEPEATER = _level.THREEPEATER
WALLNUT = _level.WALLNUT
NUM_PLANTS = _level.NUM_PLANTS
class ZombieSpawnTemplate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    second = property(_level.ZombieSpawnTemplate_second_get, _level.ZombieSpawnTemplate_second_set)
    lane = property(_level.ZombieSpawnTemplate_lane_get, _level.ZombieSpawnTemplate_lane_set)
    type = property(_level.ZombieSpawnTemplate_type_get, _level.ZombieSpawnTemplate_type_set)

    def __init__(self, *args):
        _level.ZombieSpawnTemplate_swiginit(self, _level.new_ZombieSpawnTemplate(*args))
    __swig_destroy__ = _level.delete_ZombieSpawnTemplate

# Register ZombieSpawnTemplate in _level:
_level.ZombieSpawnTemplate_swigregister(ZombieSpawnTemplate)

class Zombie(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lane = property(_level.Zombie_lane_get, _level.Zombie_lane_set)
    col = property(_level.Zombie_col_get, _level.Zombie_col_set)
    hp = property(_level.Zombie_hp_get, _level.Zombie_hp_set)
    damage = property(_level.Zombie_damage_get, _level.Zombie_damage_set)
    move_interval_seconds = property(_level.Zombie_move_interval_seconds_get, _level.Zombie_move_interval_seconds_set)
    move_interval = property(_level.Zombie_move_interval_get, _level.Zombie_move_interval_set)
    attack_interval_seconds = property(_level.Zombie_attack_interval_seconds_get, _level.Zombie_attack_interval_seconds_set)
    attack_interval = property(_level.Zombie_attack_interval_get, _level.Zombie_attack_interval_set)
    last_action = property(_level.Zombie_last_action_get, _level.Zombie_last_action_set)
    entering_house = property(_level.Zombie_entering_house_get, _level.Zombie_entering_house_set)
    type = property(_level.Zombie_type_get, _level.Zombie_type_set)
    frozen = property(_level.Zombie_frozen_get, _level.Zombie_frozen_set)
    hypnotized = property(_level.Zombie_hypnotized_get, _level.Zombie_hypnotized_set)

    def __init__(self, *args):
        _level.Zombie_swiginit(self, _level.new_Zombie(*args))

    def attack(self, level):
        return _level.Zombie_attack(self, level)

    def move(self, level):
        return _level.Zombie_move(self, level)

    def do_action(self, level):
        return _level.Zombie_do_action(self, level)

    def get_damaged(self, damage, Levels):
        return _level.Zombie_get_damaged(self, damage, Levels)
    __swig_destroy__ = _level.delete_Zombie

# Register Zombie in _level:
_level.Zombie_swigregister(Zombie)

class Plant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lane = property(_level.Plant_lane_get, _level.Plant_lane_set)
    col = property(_level.Plant_col_get, _level.Plant_col_set)
    hp = property(_level.Plant_hp_get, _level.Plant_hp_set)
    cost = property(_level.Plant_cost_get, _level.Plant_cost_set)
    damage = property(_level.Plant_damage_get, _level.Plant_damage_set)
    action_interval_seconds = property(_level.Plant_action_interval_seconds_get, _level.Plant_action_interval_seconds_set)
    action_interval = property(_level.Plant_action_interval_get, _level.Plant_action_interval_set)
    recharge_seconds = property(_level.Plant_recharge_seconds_get, _level.Plant_recharge_seconds_set)
    recharge = property(_level.Plant_recharge_get, _level.Plant_recharge_set)
    frame_action_available = property(_level.Plant_frame_action_available_get, _level.Plant_frame_action_available_set)
    fps = property(_level.Plant_fps_get, _level.Plant_fps_set)
    plant_name = property(_level.Plant_plant_name_get, _level.Plant_plant_name_set)

    def __init__(self, lane, column, plant_data, frame, fps):
        _level.Plant_swiginit(self, _level.new_Plant(lane, column, plant_data, frame, fps))
    action = property(_level.Plant_action_get, _level.Plant_action_set)

    def do_action(self, level):
        return _level.Plant_do_action(self, level)

    def get_damaged(self, damage, level):
        return _level.Plant_get_damaged(self, damage, level)

    def clone(self):
        return _level.Plant_clone(self)
    __swig_destroy__ = _level.delete_Plant

# Register Plant in _level:
_level.Plant_swigregister(Plant)


def cherrybomb_action(level, plant):
    return _level.cherrybomb_action(level, plant)

def chomper_action(level, plant):
    return _level.chomper_action(level, plant)

def hypnoshroom_action(level, plant):
    return _level.hypnoshroom_action(level, plant)

def iceshroom_action(level, plant):
    return _level.iceshroom_action(level, plant)

def jalapeno_action(level, plant):
    return _level.jalapeno_action(level, plant)

def peashooter_action(level, plant):
    return _level.peashooter_action(level, plant)

def potatomine_action(level, plant):
    return _level.potatomine_action(level, plant)

def puffshroom_action(level, plant):
    return _level.puffshroom_action(level, plant)

def repeaterpea_action(level, plant):
    return _level.repeaterpea_action(level, plant)

def scaredyshroom_action(level, plant):
    return _level.scaredyshroom_action(level, plant)

def snowpea_action(level, plant):
    return _level.snowpea_action(level, plant)

def spikeweed_action(level, plant):
    return _level.spikeweed_action(level, plant)

def squash_action(level, plant):
    return _level.squash_action(level, plant)

def sunflower_action(level, plant):
    return _level.sunflower_action(level, plant)

def sunshroom_action(level, plant):
    return _level.sunshroom_action(level, plant)

def threepeater_action(level, plant):
    return _level.threepeater_action(level, plant)

def wallnut_action(level, plant):
    return _level.wallnut_action(level, plant)
class State(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _level.State_swiginit(self, _level.new_State())
    __swig_destroy__ = _level.delete_State

# Register State in _level:
_level.State_swigregister(State)

class Action(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    plant_name = property(_level.Action_plant_name_get)
    lane = property(_level.Action_lane_get, _level.Action_lane_set)
    col = property(_level.Action_col_get, _level.Action_col_set)

    def __init__(self, name, lane, col):
        _level.Action_swiginit(self, _level.new_Action(name, lane, col))
    __swig_destroy__ = _level.delete_Action

# Register Action in _level:
_level.Action_swigregister(Action)

class Level(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lanes = property(_level.Level_lanes_get, _level.Level_lanes_set)
    cols = property(_level.Level_cols_get, _level.Level_cols_set)
    suns = property(_level.Level_suns_get, _level.Level_suns_set)
    frame = property(_level.Level_frame_get, _level.Level_frame_set)
    last_sun_generated = property(_level.Level_last_sun_generated_get, _level.Level_last_sun_generated_set)
    sun_interval_seconds = property(_level.Level_sun_interval_seconds_get, _level.Level_sun_interval_seconds_set)
    sun_interval = property(_level.Level_sun_interval_get, _level.Level_sun_interval_set)
    zombie_in_home_col = property(_level.Level_zombie_in_home_col_get, _level.Level_zombie_in_home_col_set)
    done = property(_level.Level_done_get, _level.Level_done_set)
    win = property(_level.Level_win_get, _level.Level_win_set)
    lawnmowers = property(_level.Level_lawnmowers_get, _level.Level_lawnmowers_set)
    fps = property(_level.Level_fps_get, _level.Level_fps_set)
    return_state = property(_level.Level_return_state_get, _level.Level_return_state_set)
    zombie_list = property(_level.Level_zombie_list_get, _level.Level_zombie_list_set)
    zombie_grid = property(_level.Level_zombie_grid_get, _level.Level_zombie_grid_set)
    plant_list = property(_level.Level_plant_list_get, _level.Level_plant_list_set)
    plant_grid = property(_level.Level_plant_grid_get, _level.Level_plant_grid_set)
    level_data = property(_level.Level_level_data_get, _level.Level_level_data_set)
    plant_data = property(_level.Level_plant_data_get, _level.Level_plant_data_set)

    def clone(self):
        return _level.Level_clone(self)

    def __init__(self, *args):
        _level.Level_swiginit(self, _level.new_Level(*args))
    __swig_destroy__ = _level.delete_Level

    def step(self, *args):
        return _level.Level_step(self, *args)

    def do_zombie_actions(self):
        return _level.Level_do_zombie_actions(self)

    def do_plant_actions(self):
        return _level.Level_do_plant_actions(self)

    def do_player_action(self, action):
        return _level.Level_do_player_action(self, action)

    def spawn_zombies(self):
        return _level.Level_spawn_zombies(self)

    def spawn_suns(self):
        return _level.Level_spawn_suns(self)

    def check_endgame(self):
        return _level.Level_check_endgame(self)

    def is_action_legal(self, action):
        return _level.Level_is_action_legal(self, action)

    def append_zombie(self, second, lane, type):
        return _level.Level_append_zombie(self, second, lane, type)

    def rollout(self, num_cpu, num_games=10000):
        return _level.Level_rollout(self, num_cpu, num_games)

    def get_random_action(self):
        return _level.Level_get_random_action(self)

    def get_random_plant(self):
        return _level.Level_get_random_plant(self)

    def get_random_position(self, lane, col):
        return _level.Level_get_random_position(self, lane, col)

    def plant(self, action):
        return _level.Level_plant(self, action)
    no_action = property(_level.Level_no_action_get)

    @staticmethod
    def play_random_game(env):
        return _level.Level_play_random_game(env)

# Register Level in _level:
_level.Level_swigregister(Level)

def Level_play_random_game(env):
    return _level.Level_play_random_game(env)



